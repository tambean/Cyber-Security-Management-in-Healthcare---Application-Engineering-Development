/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterpriseType;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PharmacistOrganization;
import Business.Person.Person;
import Business.Person.VitalSign;
import Business.UserAccount.UserAccount;
import Business.Utils.DataGenerator;
import Business.Utils.Validations;
import Business.WorkQueue.BookingAppointmentRequest;
import Business.WorkQueue.PharamcyWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author anike
 */
public class DocToPatientExaminationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DocToPatientExaminationJPanel
     */
    JPanel userContainer;
    Person person;
    private VitalSign vs;
    private BookingAppointmentRequest request;
    private UserAccount usr;
    private  Enterprise enterprise;
    private Network n;
    public DocToPatientExaminationJPanel(JPanel userContainer, Person person,BookingAppointmentRequest request,UserAccount usr, Enterprise enterprise,Network n) {
        initComponents();
        this.userContainer = userContainer;
        this.person = person;
        this.request = request;
        this.usr = usr;
        this.n = n;
        this.enterprise = enterprise;
        vs = calculateAndShowRandomFigures();
    }

    
    
    private VitalSign calculateAndShowRandomFigures() {
        
        int patientAge = person.getAge();
        int BP;
        int HR;
        int RR;

        if (patientAge >= 1 && patientAge <= 3) {
            BP = DataGenerator.getRandomNumberBetweenRange(80, 112);
            HR = DataGenerator.getRandomNumberBetweenRange(78, 130);
            RR = DataGenerator.getRandomNumberBetweenRange(18, 32);

        } else if (patientAge >= 4 && patientAge <= 5) {
            BP = DataGenerator.getRandomNumberBetweenRange(80, 112);
            HR = DataGenerator.getRandomNumberBetweenRange(77, 120);
            RR = DataGenerator.getRandomNumberBetweenRange(18, 32);
        } else if (patientAge >= 6 && patientAge <= 12) {
            BP = DataGenerator.getRandomNumberBetweenRange(80, 120);
            HR = DataGenerator.getRandomNumberBetweenRange(68, 112);
            RR = DataGenerator.getRandomNumberBetweenRange(18, 32);
        } else {
            BP = DataGenerator.getRandomNumberBetweenRange(108, 122);
            HR = DataGenerator.getRandomNumberBetweenRange(54, 106);
            RR = DataGenerator.getRandomNumberBetweenRange(10, 22);

        }
        
        txtBloodPressure.setText(Integer.toString(BP));
        txtHeartRate.setText(Integer.toString(HR));
        txtRespiratoryRate.setText(Integer.toString(RR));

        VitalSign vitalSign = new VitalSign();
        vitalSign.setHeartRate(HR);
        vitalSign.setRespiratoryRate(RR);
        vitalSign.setSystolicBloodpressure(BP);
        String date = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new java.util.Date());
        vitalSign.setTimeStmp(date);
        return vitalSign;
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave = new javax.swing.JButton();
        txtRespiratoryRate = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        txtBloodPressure = new javax.swing.JTextField();
        txtWeight = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jexamineText = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMedical = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(0, 204, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/Images/submit.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backJButton.setForeground(new java.awt.Color(0, 204, 255));
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/Images/back.jpg"))); // NOI18N
        backJButton.setText("Back");
        backJButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 255));
        jLabel5.setText("Patient Examination");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/utils/user_login_man_profile_account-128.png"))); // NOI18N

        jLabel9.setText("You are currently logged in.");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 204, 255));
        jLabel8.setText("Recorded Vital Signs Details");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 204, 255));
        jLabel10.setText("Respiratory Rate");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 204, 255));
        jLabel11.setText("Heart Rate");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 204, 255));
        jLabel12.setText("Weight(Pounds)");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 204, 255));
        jLabel13.setText("Blood Pressure");

        jexamineText.setColumns(20);
        jexamineText.setRows(5);
        jScrollPane1.setViewportView(jexamineText);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 204, 255));
        jLabel14.setText("Examination Result");

        txtMedical.setColumns(20);
        txtMedical.setRows(5);
        jScrollPane2.setViewportView(txtMedical);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 204, 255));
        jLabel15.setText("Medical Prescription");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                    .addGap(107, 107, 107)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addGap(41, 41, 41))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel13)
                                .addComponent(jLabel12)
                                .addComponent(jLabel14))
                            .addGap(12, 12, 12))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(txtBloodPressure)
                            .addComponent(txtHeartRate)
                            .addComponent(txtRespiratoryRate))))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel7))))
            .addGroup(layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jLabel8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel8)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRespiratoryRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backJButton)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

        if (vs == null) {
            return;
        }

        if ((txtWeight.getText().isEmpty())||(jexamineText.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "Please complete the empty fields");
            return;
        }
        
        Validations v = new Validations();
         if(!(v.ValidateWeight(txtWeight.getText()))){
             JOptionPane.showMessageDialog(null, "Invalid Weight");
            return;
         }

        vs.setWeight(Integer.parseInt(txtWeight.getText().trim()));
        vs.setExaminationResult(jexamineText.getText());
        if(!(txtMedical.getText().isEmpty())){
        vs.setPrescribedMedicine(txtMedical.getText());
        }
        validateRate(vs);    
        
        request.setAppointment(jexamineText.getText());
        request.setStatus("Completed");
        if (!(txtMedical.getText().isEmpty())) {
            int result = JOptionPane.showConfirmDialog(null, "Do you want to raise request for prescribed Medicines?",
                    "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                
                PharamcyWorkRequest request = new PharamcyWorkRequest();
                request.setMedicineNames(txtMedical.getText().trim());
                request.setMessage("Prescribed Medicines");
                request.setSender(usr);
                request.setStatus("Sent");
                Organization org = null;
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getEnterpriseType().getValue().matches("Pharmaceutical")) {
                        for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PharmacistOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }

                }
                
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                    usr.getWorkQueue().getWorkRequestList().add(request);
                }
                JOptionPane.showMessageDialog(null, "Request raised");
            } else if (result == JOptionPane.NO_OPTION) {
                return;
            }
            
        }

        JOptionPane.showMessageDialog(null, "Examination Saved Sucessfully");
        person.getVsignHist().addVitalSign(vs);
        clearFields();
        btnSave.setEnabled(false);

    }

        private void clearFields() {

            txtBloodPressure.setText("");
            txtHeartRate.setText("");
            txtRespiratoryRate.setText("");
            txtWeight.setText("");
            jexamineText.setText("");
            txtMedical.setText("");
            txtBloodPressure.setEnabled(false);
            txtHeartRate.setEnabled(false);
            txtRespiratoryRate.setEnabled(false);
            txtWeight.setEnabled(false);
            jexamineText.setEnabled(false);
            txtMedical.setEnabled(false);
        }
        private void validateRate(VitalSign vs) {

            int age = person.getAge();
            int heartrate = Integer.parseInt(txtHeartRate.getText().trim());
            int respiRate = Integer.parseInt(txtRespiratoryRate.getText().trim());
            int bloodPressure = Integer.parseInt(txtBloodPressure.getText());
            int weight = Integer.parseInt(txtWeight.getText().trim());

            if ((age >= 1) && (age <= 3) && (heartrate >= 80) && (heartrate <= 130)
                && (respiRate >= 20) && (respiRate <= 30)
                && (bloodPressure >= 80) && (bloodPressure <= 110)
                && (weight >= 22) && (weight <= 31)) {

                vs.setVitalSign("Normal");

            }else if ((age >= 4) && (age <= 5) && (heartrate >= 80) && (heartrate <= 120)
                && (respiRate >= 20) && (respiRate <= 30)
                && (bloodPressure >= 80) && (bloodPressure <= 110)
                && (weight >= 31) && (weight <= 40)) {

                vs.setVitalSign("Normal");

            } else if ((age >= 6) && (age <= 12) && (heartrate >= 70) && (heartrate <= 110)
                && (respiRate >= 20) && (respiRate <= 30)
                && (bloodPressure >= 80) && (bloodPressure <= 120)
                && (weight >= 41) && (weight <= 92)) {

                vs.setVitalSign("Normal");
            } else if ((age >= 13) && (heartrate >= 55) && (heartrate <= 105)
                && (respiRate >= 12) && (respiRate <= 20)
                && (bloodPressure >= 110) && (bloodPressure <= 120)
                && (weight > 110)) {

                vs.setVitalSign("Normal");

            } else {
                vs.setVitalSign("Abnormal");
            }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userContainer.remove(this);
        Component[] componentArray = userContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageBookingRequestJPanel dwjp = (ManageBookingRequestJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userContainer.getLayout();
        layout.previous(userContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jexamineText;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextArea txtMedical;
    private javax.swing.JTextField txtRespiratoryRate;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
